func Create{{.TableName}}({{ if .UseContext}}ctx context.Context,{{ end }} t *testing.T, db Inserter[*structs_gen.{{ .TableName }}], m {{ if not .UseValueModifier }}*{{ end }}structs_gen.{{.TableName}}, opts ...func(*structs_gen.{{ .TableName }})) *structs_gen.{{.TableName}} {
  t.Helper()

  tbl := &structs_gen.{{.TableName}} {
  {{ range $i, $f := .Fields -}}
    {{ if $f.DefaultValue }} {{ $f.Name }}: {{ $f.DefaultValue }}, {{ if $f.IsOverwritten }} // {{ $f.Name }} is overwritten {{ end }}
    {{ else if $f.Type.IsSlice }} // {{ $f.Name }} is slice
    {{ else -}} // {{ $f.Name }} is unknown
    {{ end }}
  {{- end -}}
  }

  {{ range $i, $f := .Fields -}}
  {{ if $f.MustOverwrite -}} tbl.{{ $f.Name }} = m.{{ $f.Name }} // must overwrite
  {{ else -}}
  if
    {{ if $f.IsModifiedCond -}} {{ $f.IsModifiedCond }}
    {{- else if $f.Type.IsSlice -}} len(m.{{ $f.Name }}) > 0
    {{- else -}} isModified(m.{{ $f.Name }})
    {{- end -}} {
    tbl.{{ $f.Name }} = m.{{ $f.Name }}
  }
  {{ end -}}
  {{- end -}}
  for _, opt := range opts {
    opt(tbl)
  }

  m, err := db.Insert({{ if .UseContext }}ctx{{ else }}context.Background(){{ end}}, tbl)
  if err != nil {
    t.Fatal(err)
  }

  return m
}
