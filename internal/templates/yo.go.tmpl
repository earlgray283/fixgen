func Create{{.TableName}}({{ if .UseContext}}ctx context.Context,{{ end }} t *testing.T, db *spanner.Client, m {{ if not .UseValueModifier }}*{{ end }}yo_gen.{{.TableName}}, opts ...func(*yo_gen.{{ .TableName }})) *yo_gen.{{.TableName}} {
  t.Helper()

  tbl := &yo_gen.{{.TableName}} {
  {{ range $i, $f := .Fields -}}
    {{ if $f.DefaultValue }} {{ $f.Name }}: {{ $f.DefaultValue }}, {{ if $f.IsOverwritten }} // {{ $f.Name }} is overwritten {{ end }}
    {{ else if $f.IsSpannerNullType }} // {{ $f.Name }} is nullable
    {{ else if $f.Type.IsSlice }} // {{ $f.Name }} is slice
    {{ else -}} // {{ $f.Name }} is unknown
    {{ end }}
  {{- end -}}
  }

  {{ range $i, $f := .Fields -}}
  {{ if $f.MustOverwrite -}} tbl.{{ $f.Name }} = m.{{ $f.Name }} // must overwrite
  {{ else -}}
  if
    {{ if $f.IsModifiedCond -}} {{ $f.IsModifiedCond }}
    {{- else if $f.IsSpannerNullType -}} !m.{{ $f.Name }}.IsNull()
    {{- else if $f.Type.IsSlice -}} len(m.{{ $f.Name }}) > 0
    {{- else -}} isModified(m.{{ $f.Name }})
    {{- end -}} {
    {{- if $f.AllowCommitTimestamp -}} t.Log("{{ $f.Name }}: spanner.CommitTimestamp should be used") {{- end }}
    tbl.{{ $f.Name }} = m.{{ $f.Name }}
  }
  {{ end -}}
  {{- end -}}
  for _, opt := range opts {
    opt(tbl)
  }

  _, err := db.ReadWriteTransaction({{ if .UseContext }}ctx{{ else }}context.Background(){{end}}, func(ctx context.Context, tx *spanner.ReadWriteTransaction) error {
    return tx.BufferWrite([]*spanner.Mutation{tbl.Insert(ctx)})
  })
  if err != nil {
    t.Fatal(err)
  }

  return tbl
}

