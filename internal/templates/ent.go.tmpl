func Create{{.TableName}}(t *testing.T, db *ent_gen.Client, m {{ if not .UseValueModifier }}*{{ end }}ent_gen.{{.TableName}}, opts ...func(*ent_gen.{{.TableName}}Create)) *ent_gen.{{.TableName}} {
  t.Helper()

  tbl := &ent_gen.{{.TableName}} { 
    {{ range $i, $f := .Fields -}}
      {{ if $f.DefaultValue }} {{ $f.Name }}: {{ $f.DefaultValue }}, {{ if $f.IsOverwritten }} // {{ $f.Name }} is overwritten {{ end }}
      {{ else if $f.HasDefaultOnCreate }} // {{ $f.Name }} has default on create
      {{ else if $f.Type.IsSlice }} // {{ $f.Name }} is slice
      {{ else if $f.IsNillable }} // {{ $f.Name }} is nillable
      {{ else -}} // {{ $f.Name }} is unknown
      {{ end }}
    {{- end -}}
  }

  builder := db.{{.TableName}}.Create()
  {{ range $i, $f := .Fields -}}
  {{ if $f.MustOverwrite -}} tbl.{{ $f.Name }} = m.{{ $f.Name }} // must overwrite
  {{ else -}}
  if
    {{- if $f.IsModifiedCond }} {{ $f.IsModifiedCond }}
    {{- else if $f.Type.IsSlice }} len(m.{{ $f.Name }}) > 0
    {{- else if $f.IsNillable }} m.{{ $f.Name }} != nil
    {{- else }} isModified(m.{{ $f.Name }})
    {{- end -}} {
      builder = builder.Set{{ $f.Name }}({{- if $f.IsNillable }}*{{ end -}}tbl.{{ $f.Name }})
  }
  {{ end -}}
  {{- end -}}
  for _, opt := range opts {
    opt(builder)
  }

  createdTbl, err := builder.Save(context.Background())
  if err != nil {
    t.Fatal(err)
  }

  return createdTbl
}
