package {{ .PackageName }}

import (
	"context"
	"testing"

  yo_gen "{{.GenPkgPath}}"
	"cloud.google.com/go/spanner"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_Create{{ .TableName }}(t *testing.T) {
	ctx := context.Background()

	db, err := spanner.NewClient(ctx, "projects/test-project/instances/test-instance/databases/test-db")
	require.NoError(t, err)
	defer db.Close()

	tcs := map[string]struct {
		modify func(tbl *yo_gen.{{ .TableName }})
		assert func(t *testing.T, modified, created *yo_gen.{{ .TableName }})
	}{
    {{ range $i, $f := range $Fields }}
		"{{ $f.Name }}": {
			modify: func(tbl *yo_gen.{{ .TableName }}) { tbl.ID = {{ $f.Value }} },
			assert: func(t *testing.T, modified, created *yo_gen.{{ .TableName }}) { assert.Equal(t, modified.{{ $f.Name }}, created.{{ $f.Name }}) },
		},{{ end }}
	}

	for name, tc := range tcs {
		t.Run(name, func(t *testing.T) {
			tbl := &{{ .ModelsStructName }}{}
			if tc.modify != nil {
				tc.modify(tbl)
			}
			created := {{ .CreateFunctionName }}(t, db, tbl)
			tc.assert(t, tbl, created)

			require.NotEmpty(t, created.ID)
			dbTbl, err := yo_gen.Find{{ .TableName }}(ctx, db.Single(), tbl.{{ .PrimaryKey }})
			require.NoError(t, err)
			tc.assert(t, tbl, dbTbl)
		})
	}
}

