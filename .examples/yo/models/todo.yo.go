// Code generated by yo. DO NOT EDIT.
// Package models contains the types.
package models

import (
	"context"
	"fmt"
	"time"

	"cloud.google.com/go/spanner"
	"google.golang.org/grpc/codes"
)

// Todo represents a row from 'Todos'.
type Todo struct {
	ID          int64            `spanner:"id" json:"id"`                   // id
	Title       string           `spanner:"title" json:"title"`             // title
	Description string           `spanner:"description" json:"description"` // description
	CreatedAt   time.Time        `spanner:"created_at" json:"created_at"`   // created_at
	UpdatedAt   spanner.NullTime `spanner:"updated_at" json:"updated_at"`   // updated_at
	DoneAt      spanner.NullTime `spanner:"done_at" json:"done_at"`         // done_at
}

func TodoPrimaryKeys() []string {
	return []string{
		"id",
	}
}

func TodoColumns() []string {
	return []string{
		"id",
		"title",
		"description",
		"created_at",
		"updated_at",
		"done_at",
	}
}

func TodoWritableColumns() []string {
	return []string{
		"id",
		"title",
		"description",
		"created_at",
		"updated_at",
		"done_at",
	}
}

func (t *Todo) columnsToPtrs(cols []string, customPtrs map[string]interface{}) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		if val, ok := customPtrs[col]; ok {
			ret = append(ret, val)
			continue
		}

		switch col {
		case "id":
			ret = append(ret, &t.ID)
		case "title":
			ret = append(ret, &t.Title)
		case "description":
			ret = append(ret, &t.Description)
		case "created_at":
			ret = append(ret, &t.CreatedAt)
		case "updated_at":
			ret = append(ret, &t.UpdatedAt)
		case "done_at":
			ret = append(ret, &t.DoneAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (t *Todo) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "id":
			ret = append(ret, t.ID)
		case "title":
			ret = append(ret, t.Title)
		case "description":
			ret = append(ret, t.Description)
		case "created_at":
			ret = append(ret, t.CreatedAt)
		case "updated_at":
			ret = append(ret, t.UpdatedAt)
		case "done_at":
			ret = append(ret, t.DoneAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

// newTodo_Decoder returns a decoder which reads a row from *spanner.Row
// into Todo. The decoder is not goroutine-safe. Don't use it concurrently.
func newTodo_Decoder(cols []string) func(*spanner.Row) (*Todo, error) {
	customPtrs := map[string]interface{}{}

	return func(row *spanner.Row) (*Todo, error) {
		var t Todo
		ptrs, err := t.columnsToPtrs(cols, customPtrs)
		if err != nil {
			return nil, err
		}

		if err := row.Columns(ptrs...); err != nil {
			return nil, err
		}

		return &t, nil
	}
}

// Insert returns a Mutation to insert a row into a table. If the row already
// exists, the write or transaction fails.
func (t *Todo) Insert(ctx context.Context) *spanner.Mutation {
	values, _ := t.columnsToValues(TodoWritableColumns())
	return spanner.Insert("Todos", TodoWritableColumns(), values)
}

// Update returns a Mutation to update a row in a table. If the row does not
// already exist, the write or transaction fails.
func (t *Todo) Update(ctx context.Context) *spanner.Mutation {
	values, _ := t.columnsToValues(TodoWritableColumns())
	return spanner.Update("Todos", TodoWritableColumns(), values)
}

// InsertOrUpdate returns a Mutation to insert a row into a table. If the row
// already exists, it updates it instead. Any column values not explicitly
// written are preserved.
func (t *Todo) InsertOrUpdate(ctx context.Context) *spanner.Mutation {
	values, _ := t.columnsToValues(TodoWritableColumns())
	return spanner.InsertOrUpdate("Todos", TodoWritableColumns(), values)
}

// UpdateColumns returns a Mutation to update specified columns of a row in a table.
func (t *Todo) UpdateColumns(ctx context.Context, cols ...string) (*spanner.Mutation, error) {
	// add primary keys to columns to update by primary keys
	colsWithPKeys := append(cols, TodoPrimaryKeys()...)

	values, err := t.columnsToValues(colsWithPKeys)
	if err != nil {
		return nil, newErrorWithCode(codes.InvalidArgument, "Todo.UpdateColumns", "Todos", err)
	}

	return spanner.Update("Todos", colsWithPKeys, values), nil
}

// FindTodo gets a Todo by primary key
func FindTodo(ctx context.Context, db YORODB, id int64) (*Todo, error) {
	key := spanner.Key{id}
	row, err := db.ReadRow(ctx, "Todos", key, TodoColumns())
	if err != nil {
		return nil, newError("FindTodo", "Todos", err)
	}

	decoder := newTodo_Decoder(TodoColumns())
	t, err := decoder(row)
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "FindTodo", "Todos", err)
	}

	return t, nil
}

// ReadTodo retrieves multiples rows from Todo by KeySet as a slice.
func ReadTodo(ctx context.Context, db YORODB, keys spanner.KeySet) ([]*Todo, error) {
	var res []*Todo

	decoder := newTodo_Decoder(TodoColumns())

	rows := db.Read(ctx, "Todos", keys, TodoColumns())
	err := rows.Do(func(row *spanner.Row) error {
		t, err := decoder(row)
		if err != nil {
			return err
		}
		res = append(res, t)

		return nil
	})
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "ReadTodo", "Todos", err)
	}

	return res, nil
}

// Delete deletes the Todo from the database.
func (t *Todo) Delete(ctx context.Context) *spanner.Mutation {
	values, _ := t.columnsToValues(TodoPrimaryKeys())
	return spanner.Delete("Todos", spanner.Key(values))
}
